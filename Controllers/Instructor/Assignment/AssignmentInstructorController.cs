using BTL_QuanLyLopHocTrucTuyen.Data;
using BTL_QuanLyLopHocTrucTuyen.Models;
using BTL_QuanLyLopHocTrucTuyen.Services;
using BTL_QuanLyLopHocTrucTuyen.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc;

namespace BTL_QuanLyLopHocTrucTuyen.Controllers
{
    [Route("Instructor/[action]")]
    public class AssignmentInstructorController : Controller
    {
        private readonly IAssignmentRepository _assignmentRepository;
        private readonly ILessonRepository _lessonRepository;
        private readonly SupabaseStorageService _supabaseStorage;

        public AssignmentInstructorController(
            IAssignmentRepository assignmentRepository,
            ILessonRepository lessonRepository,
            SupabaseStorageService supabaseStorage)
        {
            _assignmentRepository = assignmentRepository;
            _lessonRepository = lessonRepository;
            _supabaseStorage = supabaseStorage;
        }

        /* =====================================================
           üìã DANH S√ÅCH B√ÄI T·∫¨P
        ===================================================== */
        [HttpGet]
        public async Task<IActionResult> Assignment()
        {
            var assignments = (await _assignmentRepository.FindAsync())
                .OrderByDescending(a => a.CreatedAt)
                .ToList();

            return View("~/Views/Instructor/AssignmentInstructor/Assignment.cshtml", assignments);
        }

        /* =====================================================
           ‚ûï TH√äM B√ÄI T·∫¨P (Supabase)
        ===================================================== */
        [HttpGet]
        public async Task<IActionResult> AddAssignment(Guid? lessonId)
        {
            ViewBag.Lessons = (await _lessonRepository.FindAsync()).OrderBy(l => l.Title).ToList();
            var assignment = new Assignment { LessonId = lessonId ?? Guid.Empty };
            return View("~/Views/Instructor/AssignmentInstructor/AddAssignment.cshtml", assignment);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddAssignment([FromForm] Assignment assignment)
        {
            Console.WriteLine("===== üß© B·∫ÆT ƒê·∫¶U X·ª¨ L√ù TH√äM B√ÄI T·∫¨P =====");
            Console.WriteLine($"üìò Ti√™u ƒë·ªÅ: {assignment.Title}");

            if (!ModelState.IsValid)
            {
                ViewBag.Lessons = (await _lessonRepository.FindAsync()).OrderBy(l => l.Title).ToList();
                return View("~/Views/Instructor/AssignmentInstructor/AddAssignment.cshtml", assignment);
            }

            assignment.Id = Guid.NewGuid();
            assignment.CreatedAt = DateTime.Now;

            try
            {
                // ‚úÖ N·∫øu c√≥ file upload ‚Üí l∆∞u l√™n Supabase
                if (assignment.UploadFile != null && assignment.UploadFile.Length > 0)
                {
                    var url = await _supabaseStorage.UploadFileAsync(assignment.UploadFile, "assignments");
                    assignment.UploadedFileUrl = url;
                    assignment.UploadedFileName = assignment.UploadFile.FileName;
                }

                await _assignmentRepository.AddAsync(assignment);

                Console.WriteLine($"‚úÖ ƒê√£ th√™m b√†i t·∫≠p '{assignment.Title}' v·ªõi file: {assignment.UploadedFileUrl}");
                TempData["SuccessMessage"] = "‚úÖ Th√™m b√†i t·∫≠p th√†nh c√¥ng!";
                return RedirectToAction(nameof(Assignment));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi th√™m b√†i t·∫≠p: {ex.Message}");
                ViewBag.Lessons = (await _lessonRepository.FindAsync()).OrderBy(l => l.Title).ToList(); // ‚úÖ Th√™m d√≤ng n√†y
                return View("~/Views/Instructor/AssignmentInstructor/AddAssignment.cshtml", assignment);
            }

        }

        /* =====================================================
           ‚úèÔ∏è CH·ªàNH S·ª¨A B√ÄI T·∫¨P
        ===================================================== */
        [HttpGet]
        public async Task<IActionResult> EditAssignment(Guid id)
        {
            var assignment = await _assignmentRepository.FindByIdAsync(id);
            if (assignment == null) return NotFound();
            ViewBag.Lessons = (await _lessonRepository.FindAsync()).OrderBy(l => l.Title).ToList();
            return View("~/Views/Instructor/AssignmentInstructor/EditAssignment.cshtml", assignment);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditAssignment([FromForm] Assignment assignment)
        {
            var existing = await _assignmentRepository.FindByIdAsync(assignment.Id);
            if (existing == null)
                return NotFound();

            try
            {
                existing.Title = assignment.Title;
                existing.Description = assignment.Description;
                existing.MaxScore = assignment.MaxScore;
                existing.Type = assignment.Type;
                existing.AvailableFrom = assignment.AvailableFrom;
                existing.AvailableUntil = assignment.AvailableUntil;
                existing.LessonId = assignment.LessonId;
                existing.ExternalFileUrl = assignment.ExternalFileUrl;

                // ‚úÖ N·∫øu c√≥ file m·ªõi ‚Üí x√≥a file c≈© r·ªìi upload l·∫°i
                if (assignment.UploadFile != null && assignment.UploadFile.Length > 0)
                {
                    if (!string.IsNullOrEmpty(existing.UploadedFileUrl))
                        await _supabaseStorage.DeleteFileAsync(existing.UploadedFileUrl);

                    var newUrl = await _supabaseStorage.UploadFileAsync(assignment.UploadFile, "assignments");
                    existing.UploadedFileUrl = newUrl;
                    existing.UploadedFileName = assignment.UploadFile.FileName;
                }

                await _assignmentRepository.UpdateAsync(existing);

                Console.WriteLine($"‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t b√†i t·∫≠p '{existing.Title}'");
                TempData["SuccessMessage"] = "‚úÖ C·∫≠p nh·∫≠t b√†i t·∫≠p th√†nh c√¥ng!";
                return RedirectToAction(nameof(Assignment));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói EditAssignment: {ex.Message}");
                return View("~/Views/Instructor/AssignmentInstructor/EditAssignment.cshtml", assignment);
            }
        }

        /* =====================================================
           üóëÔ∏è X√ìA B√ÄI T·∫¨P
        ===================================================== */
        [HttpDelete]
        public async Task<IActionResult> DeleteAssignment(Guid id)
        {
            var assignment = await _assignmentRepository.FindByIdAsync(id);
            if (assignment == null)
                return Json(new { success = false, message = "Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p ƒë·ªÉ x√≥a!" });

            try
            {
                if (!string.IsNullOrEmpty(assignment.UploadedFileUrl))
                    await _supabaseStorage.DeleteFileAsync(assignment.UploadedFileUrl);

                await _assignmentRepository.DeleteByIdAsync(id);

                Console.WriteLine($"üóëÔ∏è ƒê√£ x√≥a b√†i t·∫≠p '{assignment.Title}'");
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói DeleteAssignment: {ex.Message}");
                return Json(new { success = false, message = ex.Message });
            }
        }

        /* =====================================================
           üåç C√îNG KHAI / ·∫®N B√ÄI T·∫¨P
        ===================================================== */
        [HttpPost]
        [IgnoreAntiforgeryToken]
        public async Task<IActionResult> TogglePublicAssignment(Guid id)
        {
            var assignment = await _assignmentRepository.FindByIdAsync(id);
            if (assignment == null)
                return Json(new { success = false, message = "Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p." });

            try
            {
                assignment.IsPublic = !assignment.IsPublic;
                await _assignmentRepository.UpdateAsync(assignment);

                Console.WriteLine($"üåç ƒê√£ c·∫≠p nh·∫≠t c√¥ng khai: {assignment.Title} = {assignment.IsPublic}");
                return Json(new { success = true, isPublic = assignment.IsPublic });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }
    }
}
